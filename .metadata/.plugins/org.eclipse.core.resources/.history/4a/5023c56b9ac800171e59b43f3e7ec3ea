package daa38;

import java.util.Collection;
import java.util.HashMap;

public class VariablesRestrictions {
	public HashMap<Variable, Collection<Integer> > lVRs;
	
	public VariablesRestrictions()
	{
		lVRs = new HashMap<Variable, Collection<Integer> >();
	}
	
	// Returns false if it attemps to remove a value from the domain of a variable and fails
	// Theoretically should never return false. Will implement error throwing later on this one.
	public static boolean enforceRestrictions()
	{
		boolean lBadEnforce = false;
		for (VariableRestrictions lVR : pRes)
		{
			Variable lVar = lVR.mVariable;
			for (Integer lInt : lVR.mImpossibleValues)
			{
				if (!lVar.mDomain.remove(lInt))
					lBadEnforce = true;
			}
		}
		
		return (!lBadEnforce);
	}
	
	public boolean enforceRestrictions()
	{
		
		return true;
	}
}
