 package daa38.CSP.ValueSelection;

import java.util.ArrayList;
import java.util.Collection;

import daa38.CSP.Auxiliary.Constraint;
import daa38.CSP.Auxiliary.StepFrame;
import daa38.CSP.Auxiliary.Variable;
import daa38.CSP.Auxiliary.VariablesRestrictions;
import daa38.CSP.Main.Solver;

public class ArcConsistency extends ValueSelection {

	public boolean consistentPair(Variable pVar1, Integer pVal1, Variable pVar2, Integer pVal2)
	{
		Collection<Constraint> lCons = pVar1.mConstraints.get(pVar2);
		for (Constraint lCon : lCons)
		{
			Variable lVarFirst, lVarSecond;
			Integer lValFirst, lValSecond;
			if (lCon.mVariable1==pVar1)
			{
				lVarFirst = pVar1;
				lValFirst = pVal1;
				
				lVarSecond = pVar2;
				lValSecond = pVal2;
			}
			else
			{
				lVarFirst = pVar2;
				lValFirst = pVal2;
				
				lVarSecond = pVar1;
				lValSecond = pVal1;
			}
		}
	}
	
	public ArcConsistency(Solver pSolver)
	{
		super(pSolver);
	}
	
	@Override
	public void select(StepFrame pSF) {
		
		ArrayList<Variable> lVarsLeft = mSolver.mVarsLeft;
		
		Variable lNowVar = pSF.mVar;
		for (Integer lNowVal : lNowVar.mDomain)
		{
			VariablesRestrictions lVR = new VariablesRestrictions();
			boolean lFoundEmptyDomain = false;
			boolean lRestrictedSomething = true;
			while ((lRestrictedSomething)&&(!lFoundEmptyDomain))
			{
				lRestrictedSomething = false;
				for (int lIt1 = 0; lIt1 < lVarsLeft.size(); lIt1++)
				{
					Variable lVar1 = lVarsLeft.get(lIt1);
					Collection<Integer> lVar1Restrictions = new ArrayList<Integer>();
					for (Integer lVal1 : lVar1.mDomain)
					{
						if (consistentPair(lNowVar,lNowVal,lVar1,lVal1))
						{
							for (int lIt2 = 0; lIt2 < lVarsLeft.size(); lIt2++)
							{
								Variable lVar2 = lVarsLeft.get(lIt2);
								if (!consistentTriple(lNowVar,lNowVal,lVar1,lVal1,lVar2))
								{
									lVar1Restrictions.add(lVal1);
									break;
								}
							}
						}
						else
						{
							lVar1Restrictions.add(lVal1);
						}
					}
					
					if (lVar1Restrictions.size()>0)
					{
						lRestrictedSomething = true;
						Collection<Integer> lVRVar1Res = lVR.getVarRestrictions(lVar1);
						
						for (Integer lInt : lVar1Restrictions)
						{
							lVar1.mDomain.remove(lInt);
							lVRVar1Res.add(lInt);
						}
						
						if (lVar1.mDomain.size()==0)
						{
							lFoundEmptyDomain=true;
							break;
						}
					}
				}
			}
			
			lVR.liftRestrictions();
			
			if (!lFoundEmptyDomain)
			{
				pSF.mValsToGo.add(lNowVal);
				pSF.mRes.add(lVR);
			}
		}

	}

}
