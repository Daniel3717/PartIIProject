package daa38.Statistics;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import daa38.CSP.Auxiliary.AuxTimer;
import daa38.CSP.LookBack.Backtrack;
import daa38.CSP.LookBack.GaschnigsBackjumping;
import daa38.CSP.LookBack.GraphBasedBackjumping;
import daa38.CSP.LookBack.LookBack;
import daa38.CSP.Main.CSPFileHandler;
import daa38.CSP.Main.Solver;
import daa38.CSP.ValueSelection.ArcConsistency;
import daa38.CSP.ValueSelection.ConsistentAssignmentValueSelection;
import daa38.CSP.ValueSelection.ForwardChecking;
import daa38.CSP.ValueSelection.FullLookAhead;
import daa38.CSP.ValueSelection.PartialLookAhead;
import daa38.CSP.ValueSelection.ValueSelection;
import daa38.CSP.VariableOrdering.LeastConstrainedVariableOrdering;
import daa38.CSP.VariableOrdering.MostConstrainedVariableOrdering;
import daa38.CSP.VariableOrdering.RandomVariableOrdering;
import daa38.CSP.VariableOrdering.VariableOrdering;


public class Gatherer {

	//See ifs in code to understand which Integer maps to which heuristic
	public static void gather(Integer pOrder, Integer pSelect, Integer pBack, ArrayList<String> pCSPFilesIn, ArrayList<String> pCSPFilesOut) throws IOException
	{
		Solver lSolver = new Solver();
		
		
		VariableOrdering lVO = new RandomVariableOrdering(lSolver);
		
		if (pOrder == 1)
			lVO = new MostConstrainedVariableOrdering(lSolver);

		if (pOrder == 2)
			lVO = new LeastConstrainedVariableOrdering(lSolver);
		
		
		ValueSelection lVS = new ConsistentAssignmentValueSelection(lSolver);
		
		if (pSelect == 1)
			lVS = new ForwardChecking(lSolver);
		
		if (pSelect == 2)
			lVS = new FullLookAhead(lSolver);
		
		if (pSelect == 3)
			lVS = new ArcConsistency(lSolver);
		
		if (pSelect == 4)
			lVS = new PartialLookAhead(lSolver);
		
		
		LookBack lLB = new Backtrack(lSolver);
		
		if (pSelect == 1)
			lLB = new GaschnigsBackjumping(lSolver);
		
		if (pSelect == 2)
			lLB = new GraphBasedBackjumping(lSolver);

		String lData = "Statistics/Data"+pOrder+pSelect+pBack+".txt";
		FileWriter lFW = new FileWriter(new File(lData));
		
		for (int lIt = 0; lIt < pCSPFilesIn.size(); lIt++)
		{
			String lFileIn = pCSPFilesIn.get(lIt);
			String lFileOut = pCSPFilesOut.get(lIt);
			
			System.out.println("With "+pOrder+pSelect+pBack+". At file "+lFileIn);
			long lPrevTime = lSolver.solve(lFileIn, lFileOut, lVO, lVS, lLB);
			long lTime = lSolver.solve(lFileIn, lFileOut, lVO, lVS, lLB);
			if (pOrder!=0)
				while (Math.abs(lTime-lPrevTime)>HICCUPS_THRESHOLD)
				{
					lPrevTime=lTime;
					long lTime = lSolver.solve(lFileIn, lFileOut, lVO, lVS, lLB);
				}
			
			Analyser lA = new Analyser(lFileIn);
			lFW.write(pOrder + "," + pSelect + "," + pBack + "," + 
					  lA.getNrVariables() + "," + lA.getAverageDomainSize() + "," + lA.getAverageNrConstraints()+ "," + 
					  lTime+"\r\n");
		}
		
		
		lFW.close();
	}
	
	
	
	public static void main(String[] args) throws IOException {

		ArrayList<String> lCSPFilesIn = new ArrayList<String>();
		ArrayList<String> lCSPFilesOut = new ArrayList<String>();
		String lBasePath;
		
		/*
		lBasePath = "nQueens/CSP";
		for (int lInstance = 4; lInstance <= 20; lInstance++)
		{
			System.out.println("Generating nQueens instance "+lInstance);
			String lInPath = lBasePath + lInstance + ".in";
			String lOutPath = lBasePath + lInstance + ".out";
			Generator.generateNQueensCSP(lInPath, lInstance);
			
			lCSPFilesIn.add(lInPath);
			lCSPFilesOut.add(lOutPath);
		}
		*/

		lBasePath = "MapColouring/CSP";
		for (int lInstance = 1; lInstance <= 30; lInstance++)
		{
			System.out.println("Generating MapColouring instance "+lInstance);
			String lInPath = lBasePath + lInstance + ".in";
			String lOutPath = lBasePath + lInstance + ".out";
			Generator.generateMapColouringCSP(lInPath, lInstance, lInstance);
			
			lCSPFilesIn.add(lInPath);
			lCSPFilesOut.add(lOutPath);
		}
		
		for (int lVO = 0; lVO <= 2; lVO++)
			for (int lVS = 0; lVS <= 4; lVS++)
				for (int lLB = 0; lLB <= 2; lLB++)
					gather(lVO,lVS,lLB,lCSPFilesIn,lCSPFilesOut);
	}

}
